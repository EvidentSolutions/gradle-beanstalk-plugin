plugins {
    id "com.jfrog.bintray" version "1.0"
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'java'

repositories {
    jcenter()
}

dependencies {
    compile "com.amazonaws:aws-java-sdk:1.9.25"
}

group = 'fi.evident.gradle.beanstalk'
version = '0.0.1'

sourceCompatibility = 1.7
targetCompatibility = 1.7

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Add the sourceJars to non-extractor modules
artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Gradle Beanstalk Plugin')
                root.appendNode('description', 'Gradle-plugin for AWS Elastic Beanstalk')
                root.appendNode('url', 'https://bitbucket.org/evidentsolutions/gradle-beanstalk-plugin')
                root.appendNode('inceptionYear', '2015')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://bitbucket.org/evidentsolutions/gradle-beanstalk-plugin')
                scm.appendNode('connection', 'scm:https://bitbucket.org/evidentsolutions/gradle-beanstalk-plugin.git')
                scm.appendNode('developerConnection', 'scm:git@bitbucket.org:evidentsolutions/gradle-beanstalk-plugin.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'MIT')
                license.appendNode('url', 'http://opensource.org/licenses/MIT')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def komu = developers.appendNode('developer')
                komu.appendNode('id', 'komu')
                komu.appendNode('name', 'Juha Komulainen')
                komu.appendNode('email', 'juha.komulainen@evident.fi')
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : null
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : null

    publications = ['mavenJava']
    publish = false
    pkg {
        repo = 'gradle-plugins'
        userOrg = 'evident' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'gradle-beanstalk-plugin'
        desc = 'Gradle-plugin for AWS Elastic Beanstalk'
        websiteUrl = 'https://bitbucket.org/evidentsolutions/gradle-beanstalk-plugin'
        issueTrackerUrl = 'https://bitbucket.org/evidentsolutions/gradle-beanstalk-plugin/issues'
        vcsUrl = 'git@bitbucket.org:evidentsolutions/gradle-beanstalk-plugin.git'
        licenses = ['MIT']
        labels = ['aws', 'gradle']
        publicDownloadNumbers = true

        version {
            vcsTag = "v$project.version"
            attributes = ['gradle-plugin': ["fi.evident.beanstalk:${project.group}:${project.name}"]]

            gpg {
                sign = true
                passphrase = project.hasProperty('gpgPassphrase') ? project.getProperty('gpgPassphrase') : null
            }
        }

//        attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        //Optional version descriptor
//        version {
//            name = '1.3-Final' //Bintray logical version name
//            desc = 'optional, version-specific description'
//            released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//            vcsTag = '1.3.0'
//            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//            }
//            mavenCentralSync {
//                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
//                user = 'userToken' //OSS user token
//                password = 'paasword' //OSS user password
//                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//            }
//        }
    }
}

